(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{365:function(e,s,t){"use strict";t.r(s);var a=t(45),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"usevalueobservable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usevalueobservable"}},[e._v("#")]),e._v(" useValueObservable")]),e._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("useValueObservable")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TValue"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" TValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Observable"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TValue"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("Returns a observable which watches "),t("code",[e._v("value")]),e._v(" and emits "),t("code",[e._v("value")]),e._v(" whenever it changes between re-renders.")]),e._v(" "),t("p",[e._v("This is useful for converting raw values returned from other hooks such as "),t("code",[e._v("useContext")]),e._v(", into observables of those\nvalues.")]),e._v(" "),t("p",[t("strong",[e._v("Type parameters:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TValue")]),e._v(" The type of value to watch.")])]),e._v(" "),t("p",[t("strong",[e._v("Parameters:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("value")]),e._v(" The value to watch, and emit when the component mounts, then when "),t("code",[e._v("value")]),e._v(" changes.")])]),e._v(" "),t("p",[t("strong",[e._v("Returns:")]),e._v("\nReturns a observable which watches "),t("code",[e._v("value")]),e._v(" and emits "),t("code",[e._v("value")]),e._v(" whenever it changes between re-renders.\n. This observable will replay the latest "),t("code",[e._v("value")]),e._v(" when subscribed to, and complete when the component is unmounted.")])])}),[],!1,null,null,null);s.default=n.exports}}]);
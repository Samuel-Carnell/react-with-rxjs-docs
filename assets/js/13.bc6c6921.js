(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{368:function(t,e,a){"use strict";a.r(e);var s=a(45),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"usestateobservable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestateobservable"}},[t._v("#")]),t._v(" useStateObservable")]),t._v(" "),a("p",[t._v("Alternative to Reacts "),a("code",[t._v("useState")]),t._v(" hook except the first value in the tuple returned is an observable representing the current state rather than the value, and will not trigger an update of the component.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useStateObservable")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tinitialState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" TState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" TState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Creates an observable of the current state ("),a("code",[t._v("state$")]),t._v(") and a function to set the current state ("),a("code",[t._v("setState")]),t._v(").")]),t._v(" "),a("p",[t._v("When "),a("code",[t._v("state$")]),t._v(" is subscribed to, it will replay the current state to the subscriber, then emit the state when it is updated through calling "),a("code",[t._v("setState")]),t._v(".")]),t._v(" "),a("p",[t._v("The first argument passed to "),a("code",[t._v("setState")]),t._v(" accepts the same signature to that of the "),a("code",[t._v("setState")]),t._v(" function returned from Reacts "),a("code",[t._v("useState")]),t._v(" hook. It can be either a value to set the current state to or a function to compute the current state from the previous state.")]),t._v(" "),a("p",[a("strong",[t._v("Type parameters:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("TState")]),t._v(" The type of state emitted by "),a("code",[t._v("state$")]),t._v(" and the first parameter of "),a("code",[t._v("setState")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Parameters:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("initialState")]),t._v(" A value to use as the initial state or a factory function to create the initial state.")])]),t._v(" "),a("p",[a("strong",[t._v("Returns:")])]),t._v(" "),a("p",[t._v("A tuple containing an observable of the current state ("),a("code",[t._v("state$")]),t._v(") and a function to set the current state ("),a("code",[t._v("setState")]),t._v(").")])])}),[],!1,null,null,null);e.default=r.exports}}]);
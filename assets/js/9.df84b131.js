(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{363:function(e,t,s){"use strict";s.r(t);var r=s(45),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"useiscomplete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useiscomplete"}},[e._v("#")]),e._v(" useIsComplete")]),e._v(" "),s("p",[e._v("Subscribes to "),s("code",[e._v("source$")]),e._v(" and returns true if it has completed, otherwise false.")]),e._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("useIsComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("source$"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Observable"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("unknown")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("If the source observable changes in between re-renders this hook will automatically unsubscribe from the old observable and resubscribe to the new one.")]),e._v(" "),s("p",[e._v("This hook is useful in cases where a component needs to be conditionally rendered, such as a loading spinner, dependant on if the source observable is complete.")]),e._v(" "),s("p",[e._v("To make this hook concurrent mode safe the subscription is created after the component initially mounts, thus will always return "),s("code",[e._v("false")]),e._v(" when called on the initial render. You can find out more about concurrent mode safety "),s("a",{attrs:{href:"/guide/core-concepts#concurrent-mode-safety"}},[e._v("here")]),e._v(".")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Error Handling")]),e._v(" "),s("p",[e._v("If an error is thrown by the source observable, then it will be treated as if thrown by the component during the rendering process. Thus requiring a React error boundary to catch the error.")])]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Because internally this hook uses the "),s("code",[e._v("useState")]),e._v(" hook, synchronous updates may be batched by React in order to reduce re-renders. In very rare cases this may cause unexpected results.")]),e._v(" "),s("p",[e._v("To prevent this the source observable must be modified so that the subscription creation and/or the notification delivery are performed asynchronously. This can be done by calling the "),s("code",[e._v("subscribeOn")]),e._v(" operator and/or the "),s("code",[e._v("observeOn")]),e._v(" operator with the "),s("code",[e._v("asyncScheduler")]),e._v(". You can find out more on RxJS schedulers "),s("a",{attrs:{href:"https://rxjs.dev/guide/scheduler",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(".")])])])}),[],!1,null,null,null);t.default=o.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{364:function(e,s,t){"use strict";t.r(s);var a=t(45),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"useobservable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useobservable"}},[e._v("#")]),e._v(" useObservable")]),e._v(" "),t("p",[e._v("Uses the provided "),t("code",[e._v("observableFactory")]),e._v(" to compute the returned observable. This observable persists across renders,\nonly being recomputed if any of values in the "),t("code",[e._v("dependencies")]),e._v(" array change.")]),e._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("useObservable")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TObservable "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" Observable"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("unknown")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("observableFactory")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" TObservable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\tdependencies"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("unknown")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" TObservable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("This hook is essentially a observable specific version of "),t("code",[e._v("useMemo")]),e._v(", in that it will only recompute the observable value when one of the dependencies has changed. However, unlike "),t("code",[e._v("useMemo")]),e._v(' it is guaranteed to always return the same observable reference if none of the dependencies have changed, never "forgetting" a previously computed observable. This is behavior is crucial as recreating the observable will cause any hooks which subscribe to it to established new subscription leading to unpredictable results.')]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("The dependencies array should be used to specify all closure variables the "),t("code",[e._v("observableFactory")]),e._v(" uses.")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("Similar to the "),t("code",[e._v("useEffect")]),e._v(" hook, if the length of the dependencies array changes between re-renders this hook will throw an Error.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);